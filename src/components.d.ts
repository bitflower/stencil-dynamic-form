/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  FormElement,
} from './components/some-form/some-form';

declare global {

  namespace StencilComponents {
    interface DynamicContainer {
      'component': string;
      'props': any;
    }
  }

  interface HTMLDynamicContainerElement extends StencilComponents.DynamicContainer, HTMLStencilElement {}

  var HTMLDynamicContainerElement: {
    prototype: HTMLDynamicContainerElement;
    new (): HTMLDynamicContainerElement;
  };
  interface HTMLElementTagNameMap {
    'dynamic-container': HTMLDynamicContainerElement;
  }
  interface ElementTagNameMap {
    'dynamic-container': HTMLDynamicContainerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'dynamic-container': JSXElements.DynamicContainerAttributes;
    }
  }
  namespace JSXElements {
    export interface DynamicContainerAttributes extends HTMLAttributes {
      'component'?: string;
      'props'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyComponent {
      'first': string;
      'last': string;
    }
  }

  interface HTMLMyComponentElement extends StencilComponents.MyComponent, HTMLStencilElement {}

  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  interface ElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-component': JSXElements.MyComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface MyComponentAttributes extends HTMLAttributes {
      'first'?: string;
      'last'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface SomeForm {
      'elements': FormElement[];
    }
  }

  interface HTMLSomeFormElement extends StencilComponents.SomeForm, HTMLStencilElement {}

  var HTMLSomeFormElement: {
    prototype: HTMLSomeFormElement;
    new (): HTMLSomeFormElement;
  };
  interface HTMLElementTagNameMap {
    'some-form': HTMLSomeFormElement;
  }
  interface ElementTagNameMap {
    'some-form': HTMLSomeFormElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'some-form': JSXElements.SomeFormAttributes;
    }
  }
  namespace JSXElements {
    export interface SomeFormAttributes extends HTMLAttributes {
      'elements'?: FormElement[];
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;